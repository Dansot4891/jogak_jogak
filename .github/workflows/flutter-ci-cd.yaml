name: Flutter CI/CD

on:
  push:
    branches:
      - main

env:
  # shorebird
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  # ios
  CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
  CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
  PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
  KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
  # android
  ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
  ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  ANDROID_KEY_PASSWORD:   ${{ secrets.ANDROID_KEY_PASSWORD }}
  ANDROID_KEY_ALIAS:      ${{ secrets.ANDROID_KEY_ALIAS }}

jobs:
  # flutter-tests:
  #   name: Run Flutter Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.29.3'

  #     - name: Install Dependencies
  #       run: flutter pub get

  #     - name: Run Code Generation
  #       run: flutter pub run build_runner build --delete-conflicting-outputs

  #     - name: Run Tests
  #       run: flutter test

  # detect-flutter-changes:
  #   name: Detect Flutter Code Changes
  #   runs-on: ubuntu-latest
  #   outputs:
  #     flutter_changed: ${{ steps.filter.outputs.flutter }}

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: List changed files (Debugging)
  #       run: |
  #         git diff --name-only ${{ github.event.before }} ${{ github.sha }}

  #     - name: Detect Changes
  #       uses: dorny/paths-filter@v3
  #       id: filter
  #       with:
  #         base: ${{ github.event.before }}
  #         ref: ${{ github.sha }}
  #         filters: |
  #           flutter:
  #             - 'lib/**'

  # # android shorebird release
  # release-android:
  #   runs-on: ubuntu-latest
  #   name: ü§ñ Release Android

  #   steps:
  #     - name: üìö Git Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.29.3'

  #     - name: Install Dependencies
  #       run: flutter pub get

  #     - name: Run Code Generation
  #       run: flutter pub run build_runner build --delete-conflicting-outputs

  #     - name: ‚òïÔ∏è Setup Java
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: "17"
  #         distribution: "temurin"
  #         cache: gradle

  #     - name: üê¶ Setup Shorebird
  #       uses: shorebirdtech/setup-shorebird@v1
  #       with:
  #         cache: true

  #     # base64Î°ú Ïù¥Î£®Ïñ¥ÏßÑ keystore Decode
  #     - name: üîê Decode Keystore
  #       run: echo ${{ secrets.ANDROID_KEYSTORE_BASE64 }} | base64 --decode > ${{ github.workspace }}/keystore.jks

  #     - name: ‚úèÔ∏è Create key.properties
  #       run: |
  #         cat <<EOF > android/app/key.properties
  #         storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  #         keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
  #         keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
  #         storeFile=${{ github.workspace }}/keystore.jks
  #         EOF

  #     - name: üöÄ Shorebird Release
  #       uses: shorebirdtech/shorebird-release@v0
  #       env:
  #         KEYSTORE_FILE: ${{ github.workspace }}/keystore.jks
  #         KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  #         KEYSTORE_ALIAS:  ${{ secrets.ANDROID_KEY_ALIAS }}
  #       with:
  #         platform: android
  #         args: "--verbose --artifact=apk"

  #     - name: üì¶ Upload APK
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: flutter_and_friends-${{ github.ref_name }}.apk
  #         path: build/app/outputs/apk/release/app-release.apk

  #     - name: üì¶ Upload App Bundle
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: flutter_and_friends-${{ github.ref_name }}.aab
  #         path: build/app/outputs/bundle/release/app-release.aab

  # android shorebird patch
  patch-android:
    name: ü§ñ Patch Android
    runs-on: ubuntu-latest

    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      - name: Install Dependencies
        run: flutter pub get

      - name: Run Code Generation
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: ‚òïÔ∏è Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: üîß Install Android SDK & Accept Licenses
        env:
          ANDROID_SDK_ROOT: ${{ runner.tool_cache }}/android-sdk
          ANDROID_HOME:     ${{ runner.tool_cache }}/android-sdk
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          yes | $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
          $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
            "platform-tools" "platforms;android-33" "build-tools;33.0.2"

      - name: üê¶ Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: üîê Decode Keystore
        run: |
          echo "${{ env.ANDROID_KEYSTORE_BASE64 }}" \
            | base64 --decode > keystore.jks

      - name: ‚úèÔ∏è Create key.properties in app module
        run: |
          cat <<EOF > android/app/key.properties
          storePassword=${{ env.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ env.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ env.ANDROID_KEY_ALIAS }}
          storeFile=${{ github.workspace }}/keystore.jks
          EOF

      - name: üîç Debug android/app ÎîîÎ†âÌÑ∞Î¶¨ ÎÇ¥Ïö©
        run: ls -al android/app

      - name: üõ† Patch build.gradle.kts to use android/app/key.properties
        working-directory: android/app
        run: |
          # Kotlin DSLÏóêÏÑúÎäî Î≥¥ÌÜµ rootProject.file("key.properties") ÌòïÌÉúÎ°ú Ïì∞Ïó¨ ÏûàÏúºÎãà,
          # Í∑∏ Î∂ÄÎ∂ÑÎßå app/key.propertiesÎ°ú Î∞îÍøîÏ§çÎãàÎã§.
          sed -i 's|rootProject\\.file("key.properties")|rootProject.file("app/key.properties")|' build.gradle.kts

      - name: üìã Debug key.properties (app Ìè¥Îçî)
        run: |
          echo "¬∑ Í≤ΩÎ°ú ÌôïÏù∏"
          ls -lah android/app/key.properties
          echo ""
          echo "¬∑ ÎÇ¥Ïö© ÌôïÏù∏"
          cat android/app/key.properties

      - name: üö® Gradle ÎπåÎìú (ÏóêÎü¨ Ïãú tail)
        working-directory: android
        shell: bash
        run: |
          chmod +x gradlew
          # 1) ÎπåÎìú Î°úÍ∑∏Î•º build.log Ïóê Ï†ÄÏû•ÌïòÎ©¥ÏÑú ÌôîÎ©¥ÏóêÎèÑ Ï∂úÎ†•
          ./gradlew bundleRelease --stacktrace --info 2>&1 | tee build.log \
            || { \
                echo "üõë Build failed, last 50 lines:"; \
                tail -n50 build.log; \
                exit 1; \
              }

      - name: üß© Shorebird Patch
        id: shorebird-patch
        uses: shorebirdtech/shorebird-patch@v0
        env:
          SHOREBIRD_TOKEN:     ${{ env.SHOREBIRD_TOKEN }}
          KEYSTORE_FILE:       ${{ github.workspace }}/keystore.jks
          KEYSTORE_PASSWORD:   ${{ env.ANDROID_KEYSTORE_PASSWORD }}
          KEYSTORE_ALIAS:      ${{ env.ANDROID_KEY_ALIAS }}
        with:
          platform: android
          args: "--verbose --track=staging"



  # # ios shorebird release
  # release-ios:
  #   runs-on: macos-latest

  #   name: üçé Release iOS

  #   steps:
  #     - name: üìö Git Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.29.3'

  #     - name: Install Dependencies
  #       run: flutter pub get

  #     - name: Run Code Generation
  #       run: flutter pub run build_runner build --delete-conflicting-outputs

  #     - name: üê¶ Setup Shorebird
  #       uses: shorebirdtech/setup-shorebird@v1
  #       with:
  #         cache: true

  #     - name: ‚úçÔ∏è Setup XCode Signing
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #         PP_PATH=$RUNNER_TEMP/temp.mobileprovision

  #         # import certificate and provisioning profile from secrets
  #         echo -n "$CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
  #         echo -n "$PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH
  #         security find-identity -v

  #         # use uuid for the name of provisioning profile
  #         UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i $PP_PATH))

  #         # apply provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

  #     - name: üöÄ Shorebird Release
  #       uses: shorebirdtech/shorebird-release@v0
  #       with:
  #         platform: ios
  #         args: "--export-options-plist ios/GHAExportOptions.plist --verbose"

  #     - name: üßπ Clean Up
  #       if: ${{ always() }}
  #       run: |
  #         PP_PATH=$RUNNER_TEMP/temp.mobileprovision
  #         security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
  #         rm $RUNNER_TEMP/temp.mobileprovision

  #     - name: üì¶ Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: flutter_and_friends-${{ github.ref_name }}.ipa
  #         path: build/ios/ipa/flutter_and_friends.ipa

  # ios shorebird patch
  # patch-ios:
  #   name: üçé Patch iOS
  #   #needs: [flutter-tests, detect-flutter-changes]
  #   #if: needs.detect-flutter-changes.outputs.flutter_changed == 'true'
  #   runs-on: macos-latest

  #   steps:
  #     - name: üìö Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.29.3'

  #     - name: Install Dependencies
  #       run: flutter pub get

  #     - name: Run Code Generation
  #       run: flutter pub run build_runner build --delete-conflicting-outputs

  #     - name: üê¶ Setup Shorebird
  #       uses: shorebirdtech/setup-shorebird@v1
  #       with:
  #         cache: true

  #     - name: ‚úçÔ∏è Setup Xcode Signing
  #       run: |
  #         # Paths
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #         PP_PATH=$RUNNER_TEMP/temp.mobileprovision

  #         # Decode & import
  #         echo -n "$CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
  #         echo -n "$PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

  #         # Create & unlock an isolated keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #         # Import your certificate
  #         security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH
  #         security find-identity -v

  #         # Verify identity
  #         UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i $PP_PATH))

  #         # Install provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

  #     - name: üß© Shorebird Patch iOS
  #       uses: shorebirdtech/shorebird-patch@v0
  #       id: shorebird-patch-ios
  #       with:
  #         platform: ios
  #         args: "--export-options-plist ios/GHAExportOptions.plist --track=staging"
